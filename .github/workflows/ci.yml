name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            compiler: gcc
            cc: gcc
            cxx: g++
            
          - os: ubuntu-latest
            compiler: clang
            cc: clang
            cxx: clang++
            
          # macOS builds
          - os: macos-latest
            compiler: clang
            cc: clang
            cxx: clang++
            
          # Windows builds
          - os: windows-latest
            compiler: msvc
            cc: cl
            cxx: cl

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.20.0'

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build

    # - name: Install dependencies (macOS)
    #   if: runner.os == 'macOS'
    #   run: |
    #     brew install ninja

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ninja

    - name: Set up Visual Studio environment (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Set up compiler environment
      shell: bash
      run: |
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

    - name: Configure CMake
      run: cmake --preset test

    - name: Build
      run: cmake --build build/test

    - name: Run tests
      run: ctest --test-dir build/test --verbose

    - name: Run example
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          if [ -f "./build/test/basic_usage_example.exe" ]; then
            ./build/test/basic_usage_example.exe
          else
            ./build/test/Release/basic_usage_example.exe
          fi
        else
          ./build/test/basic_usage_example
        fi

  docs:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.20.0'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen ninja-build

    - name: Configure CMake with docs
      run: cmake --preset test -DBUILD_DOCS=ON

    - name: Build documentation
      run: cmake --build build/test --target docs

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: build/test/docs/html

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.20.0'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build gcovr

    - name: Configure CMake with coverage
      run: |
        cmake --preset test -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="--coverage" \
          -DCMAKE_C_FLAGS="--coverage"

    - name: Build with coverage
      run: cmake --build build/test

    - name: Run tests
      run: ctest --test-dir build/test --verbose

    - name: Generate coverage report
      run: |
        gcovr --root . --filter include/ --exclude-unreachable-branches \
          --exclude-throw-branches --xml -o coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false 
